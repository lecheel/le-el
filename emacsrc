(load "~/.emacs.d/le-packages.el")
;;(require 'package)
;;(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
;;(package-initialize)

(add-to-list 'auto-mode-alist '("\\emacsrc\\'" . lisp-mode))
(add-to-list 'auto-mode-alist '("\\vimrc\\'" . vimrc-mode))

;;
;; Init vars
;;
(require 'evil)
(evil-mode 1)
(which-key-mode 1)
(require 'git-gutter)
(global-git-gutter-mode t)
(menu-bar-mode -1)
(ac-config-default)
(global-auto-complete-mode t)
(setq linum-relative-current-symbol "")

(setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
(setq auto-save-file-name-transforms `((".*" "~/.emacs.d/backup/" t)))

(elpy-enable)

;;; If you want the underscore to be recognised as word character, you can modify its entry in the syntax-table:
(modify-syntax-entry ?_ "w")
(add-hook 'c-mode-common-hook #'(lambda () (modify-syntax-entry ?_ "w")))

(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

(require 'evil-leader)
(global-evil-leader-mode)

(load "~/.emacs.d/el/vgrep-mode.el")
(require 'vgrep-mode)
(add-hook 'grp-mode-hook '(lambda ()
        (local-set-key (kbd "RET") 'vEnter)))
(global-set-key [(f11)]'vlist)
(global-set-key (kbd "M-\'") 'vgrep)


(require 'powerline)
(require 'airline-themes)
;;(powerline-default-theme)
(load-theme 'airline-light t)


(require 'saveplace)
(setq-default save-place t)
(setq save-place-file "~/.emacs.d/saveplace")


(require 'phi-rectangle)
(phi-rectangle-mode 1)

(evil-leader/set-leader ",")

;;
;; magit ...
;;
(evil-leader/set-key
	"ga" 'magit-log-all
	"gc" 'magit-show-commit
	"gd" 'magit-diff
	"gg" 'vc-git-grep
	"gl" 'magit-reflog
	"gr" 'git-gutter:revert-hunk
	"gs" 'magit-status
	"gy" 'magit-show-refs
)

;;
;; Personal binding leStyle
;;


(global-set-key (kbd "M--") 'le-next-buffer)
(global-set-key (kbd "M-;") 'evilnc-comment-or-uncomment-lines)
(global-set-key (kbd "M-=") 'le-previous-buffer)
(global-set-key (kbd "M-b") 'ace-jump-buffer)
(global-set-key (kbd "M-c") 'phi-rectangle-set-mark-command)
(global-set-key (kbd "M-d") 'kill-whole-line)
(global-set-key (kbd "M-e") 'find-file)
(global-set-key (kbd "M-q") 'save-buffers-kill-terminal)
(global-set-key (kbd "M-y") 'er/expand-region)

(global-set-key [(f3)] 'save-buffer)
(global-set-key [(f6)] 'ace-window)
(global-set-key [(f7)] 'evil-jump-item)
(global-set-key [(f8)] 'imenu-list)
(global-set-key [(f10)] 'leMenu)

(define-key evil-normal-state-map (kbd "K") 'find-grep-word)

(evil-leader/set-key ";" 'evilnc-comment-or-uncomment-lines)
(evil-leader/set-key "=" 'iedit-mode)
(evil-leader/set-key "1" 'delete-other-windows)
(evil-leader/set-key "b" 'ace-jump-buffer)
(evil-leader/set-key "d" 'kill-whole-line)
(evil-leader/set-key "k" 'kill-buffer)
(evil-leader/set-key "x" 'delete-window)
(evil-leader/set-key "<SPC>" 'ace-jump-char-mode)

;;
;; Search ...
;;
(evil-leader/set-key
  "sp" 'pt-regexp
  "sa" 'ag
  "sg" 'grep-find
  "sk" 'find-grep-word
  )
 
;;
;; Toggle ...
;;
(evil-leader/set-key
  "tl" 'linum-relative-mode
  "tg" 'git-gutter-mode
  "td" 'rainbow-delimiters-mode
  "ty" 'yas-global-mode
  "ta" 'global-auto-complete-mode
  )

;;
;; File ...
;;
(evil-leader/set-key
  "fb" 'ibuffer
  "ff" 'find-name-dired
  "fe" 'find-file
  )


;;
;; GitGutter ...
;;
(evil-leader/set-key
  "vp" 'git-gutter:previous-hunk
  "vn" 'git-gutter:next-hunk
  "vr" 'git-gutter:revert-hunk
  "vd" 'git-gutter:popup-hunk
)

(global-set-key (kbd "<kp-add>") 'git-gutter:next-hunk)
(global-set-key (kbd "<kp-subtract>") 'git-gutter:previous-hunk)
(global-set-key (kbd "<kp-star>") 'git-gutter:popup-hunk)


;;; super M-x
(global-set-key (kbd "M-x") 'helm-M-x)


(setq visible-bell t)
(defalias 'yes-or-no-p 'y-or-n-p)

;;; override key bindind is here
;;;
(define-key evil-normal-state-map "\C-y" 'yank)
(define-key evil-insert-state-map "\C-y" 'yank)
(define-key evil-visual-state-map "\C-y" 'yank)

(define-key evil-normal-state-map "\C-w" 'evil-delete)
(define-key evil-insert-state-map "\C-w" 'evil-delete)
(define-key evil-visual-state-map "\C-w" 'evil-delete)

;; We define prefix commands only for the sake of which-key
(which-key-declare-prefixes
  ",f" "files"
  ",g" "git"
  ",v" "gitGutter"
  ",s" "Search"
  ",t" "Toggle"
  "\C-x r" "Reg/Rect"
  "\C-x a" "Abbrev"
  )

;;
;; leStyle function
;;

(add-hook
 'pre-command-hook
 (lambda ()
   (when (eq menu-bar-mode 42)
     (menu-bar-mode -1))))

(defun leMenu ()
  (interactive)
  (unless menu-bar-mode
  (menu-bar-mode 1))
  (menu-bar-open)
  (setq menu-bar-mode 42)
  )

(defun le-next-buffer()
  (interactive)
  (next-buffer)
  (let ((i 0))
    (while (and 
	    (or (string-match "^*" (buffer-name)) 
		(string-match "TAGS" (buffer-name)))
	    (< i 50))
      (setq i (1+ i)) (next-buffer) )
    ))

(defun le-previous-buffer()
  (interactive)
  (previous-buffer)
  (let ((i 0))
    (while (and 
	    (or (string-match "^*" (buffer-name)) 
		(string-match "TAGS" (buffer-name)))          
	    (< i 50))
      (setq i (1+ i)) (previous-buffer) )
    ))

;;
;; grep setting
;;

(autoload 'grep-apply-setting "grep"
  "Set SYMBOL to VALUE, and update `grep-host-defaults-alist'.
SYMBOL should be one of `grep-command', `grep-template',
`grep-use-null-device', `grep-find-command',
`grep-find-template', `grep-find-use-xargs', or
`grep-highlight-matches'.")

(defun find-grep-word (dir)
  "Run `grep' to find current word in directory DIR."
  (interactive "P")
  (grep-compute-defaults)
  (set-grep-command (concat "find . ! -name \"*.o\" ! -name \"archive-contents\" ! -name \"*.pyc\" ! -name \"*.elc\" ! -name \"*~\" ! -name \".git\" -type f -exec grep -nH -e "))
  (let* ((word (current-word)) command-args)
    (if (not word)
        (message "No word under cursor.")
      (setq command-args
            (if grep-find-command
                (concat grep-find-command word " {} +")
              (concat grep-command word " . /*")))
        (grep command-args))))

(defun set-grep-command (command)
  "Set `grep-command'."
    (grep-apply-setting 'grep-find-command command )
    (setq grep-find-command command))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(backup-inhibited t t)
 '(git-gutter:modified-sign "* ") ;; two space
 '(git-gutter:added-sign "+ ")    ;; multiple character is OK
 '(git-gutter:deleted-sign "- ")
 '(custom-enabled-themes (quote (wombat)))
 '(custom-safe-themes
   (quote
    ("962dacd99e5a99801ca7257f25be7be0cebc333ad07be97efd6ff59755e6148f" default)))
 '(make-backup-files nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(dired-directory ((t nil)))
 '(ediff-odd-diff-A ((t (:background "Grey" :foreground "green"))))
 '(helm-ff-dirs ((t nil)))
 '(helm-selection ((t (:background "yellow" :distant-foreground "black"))))
 '(helm-source-header ((t (:background "white" :foreground "black" :weight bold :height 1.3 :family "Sans Serif"))))
 '(helm-visible-mark ((t (:background "brightcyan"))))
 '(highlight ((t (:background "yellow"))))
 '(lazy-highlight ((t (:background "green" :foreground "brightyellow"))))
 '(magit-branch-current ((t (:foreground "yellow"))))
 '(magit-branch-local ((t (:foreground "yellow"))))
 '(minibuffer-prompt ((t (:foreground "green"))))
 '(rainbow-delimiters-depth-1-face ((t (:foreground "dark orange"))))
 '(rainbow-delimiters-depth-2-face ((t (:foreground "deep pink"))))
 '(rainbow-delimiters-depth-3-face ((t (:foreground "chartreuse"))))
 '(rainbow-delimiters-depth-4-face ((t (:foreground "deep sky blue"))))
 '(rainbow-delimiters-depth-5-face ((t (:foreground "yellow"))))
 '(rainbow-delimiters-depth-6-face ((t (:foreground "orchid"))))
 '(rainbow-delimiters-depth-7-face ((t (:foreground "spring green"))))
 '(rainbow-delimiters-depth-8-face ((t (:foreground "sienna1"))))
 '(region ((t (:background "green")))))
